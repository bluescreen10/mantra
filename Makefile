# ex: set ro:
# DO NOT EDIT THIS FILE
# Generated by Parrot::Configure::Compiler from build/Makefile.in

## $Id$

## arguments we want to run parrot with
PARROT_ARGS   :=

## configuration settings
VERSION       := /parrot/2.3.0
BIN_DIR       := /usr/local/bin
LIB_DIR       := /usr/local/lib$(VERSION)
DOC_DIR       := /usr/local/share/doc$(VERSION)
MANDIR        := /usr/local/man$(VERSION)

# Set up extensions
LOAD_EXT      := .so
O             := .o

# Various paths
PERL6GRAMMAR  := $(LIB_DIR)/library/PGE/Perl6Grammar.pbc
NQP           := $(LIB_DIR)/languages/nqp/nqp.pbc
PCT           := $(LIB_DIR)/library/PCT.pbc
PMC_DIR       := src/pmc
OPS_DIR       := src/ops

## Setup some commands
MAKE          := make -C
PERL          := /usr/bin/perl
CAT           := $(PERL) -MExtUtils::Command -e cat
CHMOD         := $(PERL) -MExtUtils::Command -e ExtUtils::Command::chmod
CP            := $(PERL) -MExtUtils::Command -e cp
MKPATH        := $(PERL) -MExtUtils::Command -e mkpath
RM_F          := $(PERL) -MExtUtils::Command -e rm_f
RM_RF         := $(PERL) -MExtUtils::Command -e rm_rf
POD2MAN       := pod2man
PARROT        := $(BIN_DIR)/parrot
PBC_TO_EXE    := $(BIN_DIR)/pbc_to_exe

MANTRA_GROUP := $(PMC_DIR)/mantra_group$(LOAD_EXT)
MANTRA_OPS := $(OPS_DIR)/mantra_ops$(LOAD_EXT)

#PMC_DEPS := build/src/pmc/Makefile.in $(PMC_DIR)/mantra.pmc
#OPS_DEPS := build/src/ops/Makefile.in $(OPS_DIR)/mantra.ops

SOURCES := \
  src/gen_grammar.pir \
  src/gen_actions.pir \
  src/gen_builtins.pir \
  mantra.pir

BUILTINS_PIR := \
  src/builtins/say.pir \
  src/builtins/memory.pir

DOCS := README

BUILD_CLEANUPS := \
  mantra.pbc \
  "src/gen_*.pir" \
  "*.c" \
  "*$(O)" \
  mantra \
  installable_mantra

TEST_CLEANUPS :=

# the default target
build: \
  $(MANTRA_OPS) \
  $(MANTRA_GROUP) \
  mantra.pbc

all: build mantra installable

mantra.pbc: $(SOURCES)
	$(PARROT) $(PARROT_ARGS) -o mantra.pbc mantra.pir

mantra: mantra.pbc
	$(PBC_TO_EXE) mantra.pbc

src/gen_grammar.pir: $(PERL6GRAMMAR) src/parser/grammar.pg src/parser/grammar-oper.pg
	$(PARROT) $(PARROT_ARGS) $(PERL6GRAMMAR) \
	    --output=src/gen_grammar.pir \
	    src/parser/grammar.pg \
	    src/parser/grammar-oper.pg

src/gen_actions.pir: $(NQP) src/parser/actions.pm
	$(PARROT) $(PARROT_ARGS) $(NQP) --output=src/gen_actions.pir \
	    --target=pir src/parser/actions.pm

src/gen_builtins.pir: $(BUILTINS_PIR)
	$(CAT) $(BUILTINS_PIR) > src/gen_builtins.pir

$(MANTRA_GROUP): $(PMC_DEPS)
#	$(MAKE) $(PMC_DIR)

$(MANTRA_OPS): $(OPS_DEPS)
#	$(MAKE) $(OPS_DIR)

installable: installable_mantra

installable_mantra: mantra.pbc
	$(PBC_TO_EXE) mantra.pbc --install

Makefile: build/Makefile.in
	$(PERL) Configure.pl

# This is a listing of all targets, that are meant to be called by users
help:
	@echo ""
	@echo "Following targets are available for the user:"
	@echo ""
	@echo "  build:             mantra.pbc"
	@echo "                     This is the default."
	@echo "  mantra      Self-hosting binary not to be installed."
	@echo "  all:               mantra.pbc mantra installable"
	@echo "  installable:       Create libs and self-hosting binaries to be installed."
	@echo "  install:           Install the installable targets and docs."
	@echo ""
	@echo "Testing:"
	@echo "  test:              Run the test suite."
	@echo "  test-installable:  Test self-hosting targets."
	@echo "  testclean:         Clean up test results."
	@echo ""
	@echo "Cleaning:"
	@echo "  clean:             Basic cleaning up."
	@echo "  realclean:         Removes also files generated by 'Configure.pl'"
	@echo "  distclean:         Removes also anything built, in theory"
	@echo ""
	@echo "Misc:"
	@echo "  help:              Print this help message."
	@echo ""

test: build
	$(PERL) -I$(LIB_DIR)/tools/lib t/harness --bindir=$(BIN_DIR)

# basic run for missing libs
test-installable: installable
	echo "1" | ./installable_mantra

install: installable
#	$(MAKE) $(OPS_DIR) install
#	$(MAKE) $(PMC_DIR) install
	$(CP) installable_mantra $(BIN_DIR)/parrot-mantra
	$(CHMOD) 0755 $(BIN_DIR)/parrot-mantra
	-$(MKPATH) $(LIB_DIR)/languages/mantra
	$(CP) mantra.pbc $(LIB_DIR)/languages/mantra/mantra.pbc
#	-$(MKPATH) $(MANDIR)/man1
#	$(POD2MAN) doc/running.pod > $(MANDIR)/man1/parrot-mantra.1
#	-$(MKPATH) $(DOC_DIR)/languages/mantra
#	$(CP) $(DOCS) $(DOC_DIR)/languages/mantra

uninstall:
#	$(MAKE) $(OPS_DIR) uninstall
#	$(MAKE) $(PMC_DIR) uninstall
	$(RM_F) $(BIN_DIR)/parrot-mantra
	$(RM_RF) $(LIB_DIR)/languages/mantra
#	$(RM_F) $(MANDIR)/man1/parrot-mantra.1
#	$(RM_RF) $(DOC_DIR)/languages/mantra

win32-inno-installer: installable
#	-$(MKPATH) man/man1
#	$(POD2MAN) doc/running.pod > man/man1/parrot-mantra.1
#	-$(MKPATH) man/html
#	pod2html --infile doc/running.pod --outfile man/html/parrot-mantra.html
	$(CP) installable_mantra parrot-mantra.exe
	$(PERL) -I$(LIB_DIR)/tools/lib $(LIB_DIR)/tools/dev/mk_inno_language.pl mantra
	iscc parrot-mantra.iss

testclean:
	$(RM_F) $(TEST_CLEANUPS)

clean:
#	$(MAKE) $(OPS_DIR) clean
#	$(MAKE) $(PMC_DIR) clean
	$(RM_F) $(TEST_CLEANUPS) $(BUILD_CLEANUPS)

realclean:
#	$(MAKE) $(OPS_DIR) realclean
#	$(MAKE) $(PMC_DIR) realclean
	$(RM_F) $(TEST_CLEANUPS) $(BUILD_CLEANUPS) Makefile

distclean: realclean

# Local variables:
#   mode: makefile
# End:
# vim: ft=make:

